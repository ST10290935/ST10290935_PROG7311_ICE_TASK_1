@model IEnumerable<PROG_3C_Task_Manager.Models.task>

@{
    ViewData["Title"] = "Task List";
}

<h1 class="mb-4">Task List</h1>

<p>
    <a asp-action="Create" class="btn btn-success">Create New Task</a>
</p>

<table class="table table-striped table-bordered">
    <thead class="table-dark">
        <tr>
            <th>@Html.DisplayNameFor(model => model.Name)</th>
            <th>@Html.DisplayNameFor(model => model.Description)</th>
            <th>@Html.DisplayNameFor(model => model.Priority)</th>
            <th>@Html.DisplayNameFor(model => model.Status)</th>
            <th>@Html.DisplayNameFor(model => model.StatusMessage)</th>
            <th>Due Date</th> <!-- Added Due Date -->
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model) {
            <tr>
                <td>@Html.DisplayFor(modelItem => item.Name)</td>
                <td>@Html.DisplayFor(modelItem => item.Description)</td>
                <td>
                    <span class="badge @(GetPriorityBadge(item.Priority))">
                        @Html.DisplayFor(modelItem => item.Priority)
                    </span>
                </td>
                <td>
                    <span class="badge @(GetStatusBadge(item.Status))">
                        @Html.DisplayFor(modelItem => item.Status)
                    </span>
                </td>
                <td>@Html.DisplayFor(modelItem => item.StatusMessage)</td>
                <td class="@(IsOverdue(item.Duration) ? "text-danger fw-bold" : "")">
                    @Html.DisplayFor(modelItem => item.Duration)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-primary btn-sm">Edit</a>
                    <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-info btn-sm">Details</a>
                    <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-danger btn-sm">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>

@functions {
    // Determines Bootstrap badge class for priority
    string GetPriorityBadge(string priority) {
        return priority switch {
            "High" => "bg-danger",
            "Medium" => "bg-warning text-dark",
            "Low" => "bg-success",
            _ => "bg-secondary"
        };
    }

    // Determines Bootstrap badge class for status
    string GetStatusBadge(string status) {
        return status switch {
            "Completed" => "bg-success",
            "In Progress" => "bg-primary",
            "Pending" => "bg-warning text-dark",
            "Overdue" => "bg-danger",
            _ => "bg-secondary"
        };
    }

    // Checks if the task is overdue
    bool IsOverdue(DateTime? dueDate) {
        return dueDate.HasValue && dueDate.Value.Date < DateTime.Today;
    }
}
